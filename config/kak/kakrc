colorscheme zenburn
set global tabstop 4
set global indentwidth 4
set global autoreload yes

hook global WinCreate .* %{addhl window/ number-lines}

hook global InsertChar j %{ try %{
    exec -draft hH <a-k>kj<ret> d
    exec <esc>
}}
 
# hook global WinSetOption filetype=(c|cpp) %{
#   clang-enable-autocomplete
#   clang-enable-autoinfo
#   clang-enable-diagnosts
# }

# hook global NormalIdle filetype=(c|cpp) %{
#     clang-parse
# }

# hook global WinSetOption filetype=(python) %{
#   jedi-enable-autocomplete
# }



# hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <backtab> <c-p> }
# hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <backtab> <c-p> }

def find -params 1 -shell-script-completion %{ find -type f } %{ edit %arg{1} }

def git-edit -params 1 -shell-script-completion %{ git ls-files } %{ edit %arg{1} }

def -docstring "This command starts and enable lsp for the session" lsp-toggle %{
    eval %sh{kak-lsp --kakoune -s $kak_session}
    lsp-enable
}

def -docstring "This command opens the buffer commander mode." buffer-commander %{
    on-key %{%sh{case "$kak_key" in
        "n") echo "bn" ;;
        "p") echo "bp" ;;
        "d") echo "db" ;;
        "b") echo exec ":b<space>" ;;
        esac
    }}
    info -title "Buffers" %{
-n next
-p previous
-d delete
-d choose
    }
}

def -docstring "This command opens the files comander mode" file-commander %{
    on-key %{%sh{case "$kak_key" in
        "f") echo exec ":find<space>";;
        "c") echo edit ~/.config/kak/kakrc ;;
        "s") echo write ;;
        esac
    }}
    info -title "Files" %{
-f find
-c kakrc
-s save
    }
}

def -docstring "This command opens the version control mode" vcs-commander %{
    on-key %{%sh{case "$kak_key" in
        "a") echo exec ":git<space>add<ret>";;
        "c") echo exec ":git<space>commit<ret>";;
        "f") echo exec ":git-edit<space>";;
        "p") echo exec ":git<space>push<ret>" ;;
        "P") echo exec ":git<space>pull<ret>" ;;
        esac
    }}
    info -title "Version Control" %{
    -a add
    -c commit
    -f find
    -p push
    -P pull
    }
}

def -docstring "This command opens LSP menu" lsp-commander %{
    on-key %{%sh{
        case "$kak_key" in
            "l") echo exec ":lsp-toggle";;
        esac
    }}
    info -title "Version Control" %{
    -l toggle LSP
    }
}
# Read the kak plugin
# source "%val{config}/plugins/plug.kak/rc/plug.kak"

# set up the language client protocol
# plug "ul/kak-lsp" do %{
  # cargo build --release --locked
  # cargo install --force --path .
# }

# eval %sh{kak-lsp --kakoune -s $kak_session}
# hook global WinSetOption filetype=(latex) %{
      # lsp-enable-window
# }
# hook -group lsp global KakEnd .* lsp-exit

# setup snippets
#plug "occivink/kakoune-snippets" config %{
#  set-option -add global snippets_directories "%opt{plug_install_dir}/kakoune-snippet-collection/snippets"
  # some other kakoune-snippets related configurations
#}
          
#plug "andreyorst/kakoune-snippet-collection"

map global normal '#' :comment-line<ret>

map -docstring "Paste the contents from clipboard" global user p '!xclip -sel clip -o<ret>'
map -docstring "Yank the contents to clipboard" global user y '<a-|>xclip -sel clip -i<ret>; :echo -color Information "copied selection to X11 clipboard"<ret>'

map -docstring "Manage buffers" global user b ":buffer-commander<ret>"
map -docstring "Manage files" global user f ':file-commander<ret>'
map -docstring "Version Control" global user g ':vcs-commander<ret>'
map -docstring "LSP" global user l ':lsp-commander<ret>'
